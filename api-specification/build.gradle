plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.hidetake.swagger.generator" version "2.19.2"
}

group = 'com.rozz.api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

swaggerSources {
  def typeMappings = 'URI=URI'
  def importMappings = 'URI=java.net.URI'
  eStore {
    def apiYaml = "${rootDir}/src/main/resources/api/openapi.yaml"
    def configJson = "${rootDir}/src/main/resources/api/config.json"
    inputFile = file(apiYaml)
    def ignoreFile = file("${rootDir}/src/main/resources/api/.openapi-generator-ignore")
    code {
      language = 'spring'
      configFile = file(configJson)
      rawOptions = ['--ignore-file-override', ignoreFile, '--type-mappings',
										typeMappings, '--import-mappings', importMappings] as List<String>
      components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
      dependsOn validation // Should be uncommented once plugin starts supporting OA 3 validation
    }
  }
}

compileJava.dependsOn swaggerSources.eStore.code
sourceSets.main.java.srcDir "${swaggerSources.eStore.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.eStore.code.outputDir}/src/main/resources"

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	// OpenAPI Starts
  swaggerCodegen 'org.openapitools:openapi-generator-cli:4.3.1'
	compileOnly 'io.swagger:swagger-annotations:1.6.2'
	compileOnly 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.openapitools:jackson-databind-nullable:0.2.1'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
  // OpenAPI Ends

	implementation 'org.springframework.boot:spring-boot-starter-web'
	
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

tasks.named('test') {
	useJUnitPlatform()
}
